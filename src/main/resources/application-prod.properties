# For how long, 5 minutes, order can stay in status NEW.
# If order create at is less that now, it will run cron
app.orders.payment-period=PT5M
# Run cron job every minute
# Delay to change status from NEW to any other status
# After delay, 5 minutes, status will be changed from NEW to ABANDONED
app.orders.abandon-cron=0 */1 * * * *

# ADMIN
app.security.admin.username=admin
app.security.admin.password=$2a$10$/9wccFfvlaBJx7.wzCIu9e2PK2SA/xXYeXW6h7Fb5HFA5r8e
app.security.admin.roles=ROLE_ADMIN

## Spring
server.error.include-message=always
server.error.include-binding-errors=always
# szczegoly polaczenia z baza
# spring.datasource.url=jdbc:postgresql://${PROD_DB_HOST}:${PROD_DB_PORT}/${PROD_DB_NAME}
# spring.datasource.username=${PROD_DB_USERNAME}
# spring.datasource.password=${PROD_DB_PASSWORD}
# spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://${PGHOST}:${PGPORT}/${PGDATABASE}
spring.datasource.username=${PGUSER}
spring.datasource.password=${PGPASSWORD}
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.driver-class-name=org.postgresql.Driver
# tworzenie bazy danych
spring.jpa.hibernate.ddl-auto=create
# debug sql queries to console
spring.jpa.show-sql=true

# logs spring security
logging.level.org.springframework.security=debug


